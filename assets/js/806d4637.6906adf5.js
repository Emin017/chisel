"use strict";(self.webpackChunkchisel_lang=self.webpackChunkchisel_lang||[]).push([[2563],{2485:(e,i,a)=>{a.r(i),a.d(i,{assets:()=>s,contentTitle:()=>n,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});var l=a(5893),o=a(1151);const r={layout:"docs",title:"Serialization Cookbook",section:"chisel3"},n="Serialization Cookbook",t={id:"cookbooks/serialization",title:"Serialization Cookbook",description:"* Why do I need to serialize Modules",source:"@site/docs/cookbooks/serialization.md",sourceDirName:"cookbooks",slug:"/cookbooks/serialization",permalink:"/chisel/docs/cookbooks/serialization",draft:!1,unlisted:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/cookbooks/serialization.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Serialization Cookbook",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Naming Cookbook",permalink:"/chisel/docs/cookbooks/naming"},next:{title:"Troubleshooting",permalink:"/chisel/docs/cookbooks/troubleshooting"}},s={},d=[{value:"Why do I need to serialize Modules",id:"why-do-i-need-to-serialize-modules",level:2},{value:"How do I serialize Modules with <code>SerializableModuleGenerator</code>",id:"how-do-i-serialize-modules-with-serializablemodulegenerator",level:2}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.h1,{id:"serialization-cookbook",children:"Serialization Cookbook"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:(0,l.jsx)(i.a,{href:"#why-do-i-need-to-serialize-modules",children:"Why do I need to serialize Modules"})}),"\n",(0,l.jsx)(i.li,{children:(0,l.jsx)(i.a,{href:"#how-do-i-seerialize-modules-with-serializablemodulegenerator",children:"How do I serialize Modules with SerializableModuleGenerator"})}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"why-do-i-need-to-serialize-modules",children:"Why do I need to serialize Modules"}),"\n",(0,l.jsxs)(i.p,{children:['Chisel provides a very flexible hardware design experience. However, it sometimes becomes too flexible to design a relative big designs, since parameters of module might come from: 1. Global variables; 2. Outer class; 3. Entropies(time, random). It becomes really hard or impossible to describe "how to reproduce this single module?". This forbids doing unit-test for a module generator, and introduces issues in post-synthesis when doing ECO: a change to Module A might lead to change in Module B.\nThus ',(0,l.jsx)(i.code,{children:"SerializableModuleGenerator"}),", ",(0,l.jsx)(i.code,{children:"SerializableModule[T <: SerializableModuleParameter]"})," and ",(0,l.jsx)(i.code,{children:"SerializableModuleParameter"})," are provided to solve these issues.\nFor any ",(0,l.jsx)(i.code,{children:"SerializableModuleGenerator"}),", Chisel can automatically serialize and de-serialize it by adding these constraints:"]}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsxs)(i.li,{children:["the ",(0,l.jsx)(i.code,{children:"SerializableModule"})," should not be inner class, since the outer class is a parameter to it;"]}),"\n",(0,l.jsxs)(i.li,{children:["the ",(0,l.jsx)(i.code,{children:"SerializableModule"})," has and only has one parameter with ",(0,l.jsx)(i.code,{children:"SerializableModuleParameter"})," as its type."]}),"\n",(0,l.jsx)(i.li,{children:"the Module neither depends on global variables nor uses non-reproducible functions(random, time, etc), and this should be guaranteed by user, since Scala cannot detect it."}),"\n"]}),"\n",(0,l.jsx)(i.p,{children:"It can provide these benefits:"}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsxs)(i.li,{children:["user can use ",(0,l.jsx)(i.code,{children:"SerializableModuleGenerator(module: class[SerializableModule], parameter: SerializableModuleParameter)"})," to auto serialize a Module and its parameter."]}),"\n",(0,l.jsxs)(i.li,{children:["user can nest ",(0,l.jsx)(i.code,{children:"SerializableModuleGenerator"})," in other serializable parameters to represent a relative large parameter."]}),"\n",(0,l.jsxs)(i.li,{children:["user can elaborate any ",(0,l.jsx)(i.code,{children:"SerializableModuleGenerator"})," into a single module for testing."]}),"\n"]}),"\n",(0,l.jsxs)(i.h2,{id:"how-do-i-serialize-modules-with-serializablemodulegenerator",children:["How do I serialize Modules with ",(0,l.jsx)(i.code,{children:"SerializableModuleGenerator"})]}),"\n",(0,l.jsxs)(i.p,{children:["It is pretty simple and illustrated by example below, the ",(0,l.jsx)(i.code,{children:"GCD"})," Module with ",(0,l.jsx)(i.code,{children:"width"})," as its parameter."]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-scala",children:"import chisel3._\nimport chisel3.experimental.{SerializableModule, SerializableModuleGenerator, SerializableModuleParameter}\nimport upickle.default._\n\n// provide serialization functions to GCDSerializableModuleParameter\nobject GCDSerializableModuleParameter {\n  implicit def rwP: ReadWriter[GCDSerializableModuleParameter] = macroRW\n}\n\n// Parameter\ncase class GCDSerializableModuleParameter(width: Int) extends SerializableModuleParameter\n\n// Module\nclass GCDSerializableModule(val parameter: GCDSerializableModuleParameter)\n    extends Module\n    with SerializableModule[GCDSerializableModuleParameter] {\n  val io = IO(new Bundle {\n    val a = Input(UInt(parameter.width.W))\n    val b = Input(UInt(parameter.width.W))\n    val e = Input(Bool())\n    val z = Output(UInt(parameter.width.W))\n  })\n  val x = Reg(UInt(parameter.width.W))\n  val y = Reg(UInt(parameter.width.W))\n  val z = Reg(UInt(parameter.width.W))\n  val e = Reg(Bool())\n  when(e) {\n    x := io.a\n    y := io.b\n    z := 0.U\n  }\n  when(x =/= y) {\n    when(x > y) {\n      x := x - y\n    }.otherwise {\n      y := y - x\n    }\n  }.otherwise {\n    z := x\n  }\n  io.z := z\n}\n"})}),"\n",(0,l.jsxs)(i.p,{children:["using ",(0,l.jsx)(i.code,{children:"write"})," function in ",(0,l.jsx)(i.code,{children:"upickle"}),", it should return a json string:"]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-scala",children:'val j = upickle.default.write(\n  SerializableModuleGenerator(\n    classOf[GCDSerializableModule],\n    GCDSerializableModuleParameter(32)\n  )\n)\n// j: String = "{\\"parameter\\":{\\"width\\":32},\\"generator\\":\\"repl.MdocSession$MdocApp$GCDSerializableModule\\"}"\n'})}),"\n",(0,l.jsx)(i.p,{children:"You can then read from json string and elaborate the Module:"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-scala",children:"circt.stage.ChiselStage.emitSystemVerilog(\n  upickle.default.read[SerializableModuleGenerator[GCDSerializableModule, GCDSerializableModuleParameter]](\n    ujson.read(j)\n  ).module()\n)\n"})})]})}function u(e={}){const{wrapper:i}={...(0,o.a)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},1151:(e,i,a)=>{a.d(i,{Z:()=>t,a:()=>n});var l=a(7294);const o={},r=l.createContext(o);function n(e){const i=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),l.createElement(r.Provider,{value:i},e.children)}}}]);