"use strict";(self.webpackChunkchisel_lang=self.webpackChunkchisel_lang||[]).push([[2330],{6793:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var s=n(5893),r=n(1151);const a={layout:"docs",title:"Supported Hardware",section:"chisel3"},o="Supported Hardware",i={id:"explanations/supported-hardware",title:"Supported Hardware",description:"While Chisel focuses on binary logic, Chisel can support analog and tri-state wires with the Analog type - see Datatypes in Chisel.",source:"@site/docs/explanations/supported-hardware.md",sourceDirName:"explanations",slug:"/explanations/supported-hardware",permalink:"/chisel/docs/explanations/supported-hardware",draft:!1,unlisted:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/supported-hardware.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Supported Hardware",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Source Locators",permalink:"/chisel/docs/explanations/source-locators"},next:{title:"Unconnected Wires",permalink:"/chisel/docs/explanations/unconnected-wires"}},c={},d=[];function l(e){const t={a:"a",code:"code",h1:"h1",p:"p",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"supported-hardware",children:"Supported Hardware"}),"\n",(0,s.jsxs)(t.p,{children:["While Chisel focuses on binary logic, Chisel can support analog and tri-state wires with the ",(0,s.jsx)(t.code,{children:"Analog"})," type - see ",(0,s.jsx)(t.a,{href:"data-types",children:"Datatypes in Chisel"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"We focus on binary logic designs as they constitute the vast majority of designs in practice. Tri-state logic are poorly supported standard industry flows and require special/controlled hard macros in order to be done."})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>o});var s=n(7294);const r={},a=s.createContext(r);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);